trigger:
- main

variables:
  DOCKER_IMAGE: "sharmila79/dummy-maven-project"
  DOCKER_CREDENTIALS_ID: "docker-id"
  SONARQUBE_SERVER: "sonar"
  SONARQUBE_TOKEN: "$(sonar)"
  KUBECONFIG_CREDENTIALS_ID: "kubernetes-id"

pool:
  name: Default
  demands:
  - agent.name -equals sqagentpool

stages:
- stage: CloneCode
  jobs:
  - job: CloneCode
    steps:
    - checkout: self
      clean: true

- stage: StaticAnalysis
  jobs:
  - job: StaticAnalysis
    displayName: "Static Code Analysis"
    steps:
    - task: Maven@3
      displayName: "Build and Install Dependencies"
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install'
        options: '-X'

    - task: SonarQubePrepare@7
      displayName: "Prepare SonarQube Analysis"
      inputs:
        SonarQube: 'sonar'  # Replace with your SonarQube service connection name
        scannerMode: 'CLI'
        configMode: 'file'
        configFile: 'sonar-project.properties'
        extraProperties: |
          sonar.projectKey=SonarDemo
          sonar.host.url=http://4.213.193.176:9000
          sonar.login=$(SONARQUBE_TOKEN)

    - task: SonarQubeAnalyze@7
      displayName: "Run SonarQube Analysis"

    - task: SonarQubePublish@7
      displayName: "Publish SonarQube Results"
      inputs:
        pollingTimeoutSec: '300'



- stage: BuildProject
  jobs:
  - job: BuildProject
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        options: '-X'

- stage: RunUnitTests
  jobs:
  - job: RunUnitTests
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        options: '-X'

- stage: BuildDockerImage
  jobs:
  - job: BuildDockerImage
    steps:
    - script: docker build -t $(DOCKER_IMAGE) .

- stage: PushDockerImagetoDockerHub
  jobs:
  - job: PushDockerImagetoDockerHub
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(DOCKER_CREDENTIALS_ID)'
        repository: '$(DOCKER_IMAGE)'
        command: 'push'
        tags: 'latest'

- stage: DeploytoAKS
  jobs:
  - job: DeploytoAKS
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'my-azure-connection'  # Replace with your AzureRM service connection name
        azureResourceGroup: 'rg-demo1'  # Replace with your Azure resource group
        kubernetesCluster: 'k8s-sqdemo'  # Replace with your AKS cluster name
        namespace: 'default'  # Specify the namespace; default is fine if not using custom namespaces
        command: 'apply'
        arguments: '-f deployment.yaml'  # Replace with the path to your deployment file


        

