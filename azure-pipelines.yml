trigger:
- main

variables:
  DOCKER_IMAGE: "sharmila79/dummy-maven-project"
  DOCKER_CREDENTIALS_ID: "docker-id"
  KUBECONFIG_CREDENTIALS_ID: "kubernetes-id"

pool:
  name: Default
  demands:
  - agent.name -equals sqagentpool

stages:
- stage: CloneCode
  jobs:
  - job: CloneCode
    steps:
    - checkout: self
      clean: true

- stage: BuildProject
  jobs:
  - job: BuildProject
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        options: '-X'

- stage: RunUnitTests
  jobs:
  - job: RunUnitTests
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        options: '-X'

# - stage: SonarQubeAnalysis
#   jobs:
#   - job: SonarQubeAnalysis
#     steps:
#     - task: SonarQubePrepare@5
#       inputs:
#         SonarQube: 'sonar'
#         scannerMode: 'CLI'
#         configMode: 'file'
#         configFile: 'sonar-project.properties'

#     - script: mvn clean verify sonar:sonar -Dsonar.branch.name=""
#       displayName: 'Build and Analyze with Maven'
#       env:
#         SONAR_HOST_URL: 'http://4.213.193.176:9000'
#         SONAR_LOGIN: 'sqp_a36bef0658104dd34bc87100dea945739dc4c997'

#     - task: SonarQubePublish@5
#       inputs:
#         pollingTimeoutSec: '300'

- stage: SonarQubeAnalysis
  jobs:
  - job: SonarQubeAnalysis
    steps:
    - script: mvn clean verify sonar:sonar -Dsonar.branch.name=""
      displayName: 'Build and Analyze with Maven'
      env:
        SONAR_HOST_URL: 'http://4.213.193.176:9000'
        SONAR_LOGIN: 'sqp_a36bef0658104dd34bc87100dea945739dc4c997'

- stage: BuildDockerImage
  jobs:
  - job: BuildDockerImage
    steps:
    - script: docker build -t $(DOCKER_IMAGE) .

- stage: PushDockerImagetoDockerHub
  jobs:
  - job: PushDockerImagetoDockerHub
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: '$(DOCKER_CREDENTIALS_ID)'
        repository: '$(DOCKER_IMAGE)'
        command: 'push'
        tags: 'latest'
- stage: DeploytoAKS
  jobs:
  - job: DeploytoAKS
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'my-azure-connection'  # Replace with your AzureRM service connection name
        azureResourceGroup: 'rg-demo1'  # Replace with your Azure resource group
        kubernetesCluster: 'k8s-sqdemo'  # Replace with your AKS cluster name
        namespace: 'default'  # Specify the namespace; default is fine if not using custom namespaces
        command: 'delete'
        arguments: '-f deployment.yaml || true'  # Delete the existing deployment
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'my-azure-connection'  # Replace with your AzureRM service connection name
        azureResourceGroup: 'rg-demo1'  # Replace with your Azure resource group
        kubernetesCluster: 'k8s-sqdemo'  # Replace with your AKS cluster name
        namespace: 'default'  # Specify the namespace; default is fine if not using custom namespaces
        command: 'apply'
        arguments: '-f deployment.yaml'  # Apply the new deployment

# - stage: DeploytoAKS
#   jobs:
#   - job: DeploytoAKS
#     steps:
#     - task: Kubernetes@1
#       inputs:
#         connectionType: 'Azure Resource Manager'
#         azureSubscriptionEndpoint: 'my-azure-connection'  # Replace with your AzureRM service connection name
#         azureResourceGroup: 'rg-demo1'  # Replace with your Azure resource group
#         kubernetesCluster: 'k8s-sqdemo'  # Replace with your AKS cluster name
#         namespace: 'default'  # Specify the namespace; default is fine if not using custom namespaces
#         command: 'apply'
#         arguments: '-f deployment.yaml'  # Replace with the path to your deployment file
